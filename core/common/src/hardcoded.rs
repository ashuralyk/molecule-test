pub const SPORE_CODE_HASH_SET: [[u8; 32]; 3] = [
    // mainnet
    [
        0x4a, 0x4d, 0xce, 0x1d, 0xf3, 0xdf, 0xff, 0xf7, 0xf8, 0xb2, 0xcd, 0x7d, 0xff, 0x73, 0x03,
        0xdf, 0x3b, 0x61, 0x50, 0xc9, 0x78, 0x8c, 0xb7, 0x5d, 0xcf, 0x67, 0x47, 0x24, 0x71, 0x32,
        0xb9, 0xf5,
    ],
    // testnet
    [
        0x68, 0x5a, 0x60, 0x21, 0x93, 0x09, 0x02, 0x9d, 0x01, 0x31, 0x03, 0x11, 0xdb, 0xa9, 0x53,
        0xd6, 0x70, 0x29, 0x17, 0x0c, 0xa4, 0x84, 0x8a, 0x4f, 0xf6, 0x38, 0xe5, 0x70, 0x02, 0x13,
        0x0a, 0x0d,
    ],
    // unitest
    [
        0xac, 0xee, 0xb7, 0xf0, 0x72, 0xec, 0x8e, 0xef, 0x87, 0x75, 0x44, 0xef, 0x7c, 0x2a, 0x13,
        0x1f, 0x10, 0x9f, 0x5b, 0x2a, 0x4b, 0x19, 0xd3, 0xe7, 0xb0, 0xb2, 0xd8, 0x30, 0x18, 0xaa,
        0x2c, 0x1e,
    ],
];
pub const TYPE_BURN_CODE_HASH: [[u8; 32]; 2] = [
    // mainnet/testnet
    [
        0xff, 0x78, 0xba, 0xe0, 0xab, 0xf1, 0x7d, 0x7a, 0x40, 0x4c, 0x0b, 0xe0, 0xf9, 0xad, 0x9c,
        0x91, 0x85, 0xb3, 0xf8, 0x8d, 0xcc, 0x60, 0x40, 0x34, 0x53, 0xd5, 0xba, 0x8e, 0x1f, 0x22,
        0xf5, 0x3a,
    ],
    // unitest
    [
        0xe7, 0xc1, 0x64, 0x36, 0x38, 0x3e, 0x3b, 0xd6, 0xf4, 0x8d, 0xa7, 0xab, 0xef, 0xd8, 0x49,
        0x67, 0x2a, 0xf4, 0xe9, 0xd4, 0x03, 0xf0, 0x24, 0x2d, 0xac, 0xb7, 0x92, 0xb5, 0x76, 0x47,
        0x2e, 0xc4,
    ],
];
pub const XUDT_CODE_HASH: [u8; 32] = [
    0x50, 0xbd, 0x8d, 0x66, 0x80, 0xb8, 0xb9, 0xcf, 0x98, 0xb7, 0x3f, 0x3c, 0x08, 0xfa, 0xf8, 0xb2,
    0xa2, 0x19, 0x14, 0x31, 0x19, 0x54, 0x11, 0x8a, 0xd6, 0x60, 0x9b, 0xe6, 0xe7, 0x8a, 0x1b, 0x95,
];

pub const MERGE_CARD_COUNT: usize = 3;
pub const ABOUT_3_DAYS_BLOCKS: u64 = 30000;
pub const DNA_LEN: usize = 10;
pub const GOLDEN_THRESHOLD: u8 = 15;
pub const MAX_ACTION_POINT: u16 = 150;
pub const TOKEN_DECIMAL: u128 = 100_000_000;
pub const CKB_DECIMAL: u64 = 100_000_000;

pub const CARD_VERSION: u8 = 0;
pub const ENEMY_VERSION: u8 = 0;

// Initial basic playable cards for every players
pub const DEFAULT_GAMEPLAY_CARDS: [[u8; DNA_LEN]; 20] = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 42, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 42, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 21, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 21, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 21, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 21, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 21, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 23, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 23, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 23, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 23, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 23, 0, 0, 0, 0, 0, 0],
];

pub type DNA = [u8; DNA_LEN];

// Define rarity tier boundaries
// 1. 0-50: Legendary
// 2. 51-100: Epic
// 3. 101-150: Rare
// 4. 151-255: Common
pub const LEGENDARY_MAX: u8 = 50;
pub const EPIC_MAX: u8 = 100;
pub const RARE_MAX: u8 = 150;
